name: Python UV CI
description: 'Builds, tests, and pushes a Python image with uv package management'

inputs:
  github_token:
    description: 'Automatically created token. Set this to the GITHUB_TOKEN secret'
    required: true
  gitleaks_token:
    description: 'Organisational token for Gitleaks'
    required: false # only required for Organizations, not personal accounts
  sonar_token:
    description: 'Token for SonarCloud access'
    required: true
  sonar_args:
    description: 'Custom SonarCloud arguments'
    required: true
  dockerhub_username:
    description: 'Username for the Dockerhub account'
    required: true
  dockerhub_token:
    description: 'Access token for the Dockerhub account'
    required: true
  docker_image_name:
    description: 'Docker image name'
    required: true
  source_dir:
    description: 'Source directory for the python application'
    required: true
  python_version:
    description: 'Required Python version'
    required: false
    default: "3.12"
  pytest_coverage_xml_file_name:
    description: 'PyTest coverage report path'
    required: false
    default: 'coverage-reports/coverage-pytest.xml'
  pytest_coverage_threshold_percent:
    description: 'Fails if coverage is under this percent'
    required: false
    default: 50
  uv_packages:
    description: 'Additional packages to install independantly using uv'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:

    - name: Get branch names.
      id: branch-names
      uses: tj-actions/branch-names@v8

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   

    - name: Validate conventional commits
      uses: wagoid/commitlint-github-action@v6    

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITLEAKS_LICENSE: ${{ inputs.gitleaks_token }}

    - name: Setup Variables for uv caching
      id: variable_setup
      run: echo "uv_home=$PIPX_HOME" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install uv
      id: install_uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-local-path: "${{ steps.variable_setup.outputs.uv_home }}"

    - name: Set up Python
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version: ${{ inputs.python_version }}
          cache: uv

    - name: Install '${{ steps.variable_setup.outputs.uv_packages } } mypy ruf pytest'
      run: |
        uv install mypy ${{ inputs.pipx_packages }}
        uv tool install ruf pytest
      shell: bash

    - name: Debug uv
      run: |
        pipx ensurepath # uv should be in the same path
        uv tree
      shell: bash

    - name: Create uv venv
      run: |
        uv venv 
        source .venv/bin/activate
      shell: bash

    - name: Cache uv .venv
      uses: actions/cache@v3
      id: cached_uv_dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ inputs.python_version }}-${{ hashFiles('**/uv.lock') }}

    - name: Install uv dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: uv sync --all-extras --dev
      shell: bash

    - name: Check Format with ruf
      uses: astral-sh/ruff-action@v3
      with:
        args: "format --check"
        src: "./${{ inputs.source_dir }}"

    - name: Parse PyTest coverage xml file name option
      shell: bash
      if: ${{ inputs.pytest_coverage_xml_file_name }} != ''
      run: |
        echo "pytest_report_name_options=$(echo '--cov-report=xml:${{ inputs.pytest_coverage_xml_file_name }} --cov-report=term-missing:skip-covered')" >> $GITHUB_ENV

    - name: Parse PyTest coverage fail percent option
      shell: bash
      if: ${{ inputs.pytest_coverage_threshold_percent }} != 0
      run: |
        echo "pytest_fail_percent_options=$(echo '--cov-fail-under=${{ inputs.pytest_coverage_threshold_percent }}')" >> $GITHUB_ENV

    - name: Test with PyTest
      shell: bash
      run: |
        uv run pytest --cov ${{ env.pytest_report_name_options }} ${{ env.pytest_fail_percent_options }}

    - name: Type Check with Mypy
      shell: bash
      run: |
        uv run mypy ${{ inputs.source_dir }}

    - name: Override Coverage Source Path for Sonar
      # needed for converting pytest coverage to sonarcloud formatting, details here:
      # https://copdips.com/2023/01/sonarcloud-github-action.html#file-githubworkflowsciyml
      if: ${{ inputs.pytest_coverage_xml_file_name }} != ''
      shell: bash
      run: |
        sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' $GITHUB_WORKSPACE/${{ inputs.pytest_coverage_xml_file_name }}

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        args: ${{ inputs.sonar_args }}
      env: 
        SONAR_TOKEN: ${{ inputs.sonar_token }}
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Clean up .scannerwork folder
      # Sonarcloud schedules cleanup at END of workflow, if another action does a checkout before this, it will break.
      # This is a workaround, details here: https://github.com/SonarSource/sonarqube-scan-action/issues/22#issuecomment-1906822668
      shell: bash
      run: |
        sudo rm -rf .scannerwork

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Format test image tag for caching
      run: |
        echo "formatted_branch_name=$(echo ${{ steps.branch-names.outputs.current_branch }} | sed 's/\//-/g')" >> $GITHUB_ENV
      shell: bash

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        load: true
        tags: ${{ inputs.docker_image_name }}:${{ env.formatted_branch_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.docker_image_name }}:${{ env.formatted_branch_name }}
        format: template
        template: "@/github/workspace/.github/actions/python-uv/trivy.tpl"
        output: trivy-high-critical.md
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Add Trivy output to action summary
      run: |
        echo "<h1>Trivy Results :test_tube:</h1>" >> $GITHUB_STEP_SUMMARY
        cat trivy-high-critical.md >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Check if repository is public or private
      run: |
        curl -H "Authorization: token ${{ inputs.github_token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}" > repo_details.json
        echo "private_repo=$(jq -r '.private' repo_details.json)" >> $GITHUB_ENV
      shell: bash

    - name: Login to dockerhub
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' && env.private_repo == 'false' }} 
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}

    - name: Login to GitHub Container Registry
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' && env.private_repo == 'true' }} 
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github_token }}

    - name: Create package.json for Semantic Release
      shell: bash
      run: |
        if [ ! -f "package.json" ]; then
        echo '{
          "name": "test-app",
          "version": "0.0.0",
          "private": true
        }' > package.json
        fi

    - name: Semantic Release
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }} 
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      with:
        branch: main
        ci: true
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Set image tag and name
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }}
      run: |
        # set image tag
        if [[ $(echo ${{ steps.semantic.outputs.new_release_published }}) = "true" ]]; then
          echo "image_tag=$(echo ${{ steps.semantic.outputs.new_release_version }})" >> $GITHUB_ENV
        else
          echo "image_tag=$(echo $(git describe --tags --abbrev=0 | sed 's/^v//'))" >> $GITHUB_ENV
        fi

        # set image name
        if [[ ${{ env.private_repo }} = "true" ]]; then
          echo "image_name=$(echo ghcr.io/${{ github.repository_owner }}/${{ inputs.docker_image_name }})" >> $GITHUB_ENV
        else
          echo "image_name=$(echo ${{ inputs.dockerhub_username }}/${{ inputs.docker_image_name }})" >> $GITHUB_ENV
        fi       
      shell: bash

    - name: Extract metadata (tags, labels) for Docker
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }}
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.image_name }}
        tags: |
          ${{ env.image_tag }}
          latest
        
    - name: Build and push image
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }}
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}