name: Node CI
description: 'Builds, tests, and deploys a Node.js application'

inputs:
  github_token:
    description: 'Automatically created token. Set this to the GITHUB_TOKEN secret'
    required: true
  gitleaks_token:
    description: 'Organisational token for Gitleaks'
    required: false # only required for Organizations, not personal accounts
  docker_image_name:
    description: 'Docker image name'
    required: true
  dockerhub_username:
    description: 'Dockerhub username'
    required: false
  dockerhub_token:
    description: 'Dockerhub Token'
    required: false
  source_dir:
    description: 'Source directory for the python application'
    required: true
    default: '.'



runs:
  using: 'composite'
  steps:
    - name: Extract branch name
      id: branch-names
      shell: bash
      run: echo "current_branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   

    - name: Validate conventional commits
      uses: wagoid/commitlint-github-action@v6    

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITLEAKS_LICENSE: ${{ inputs.gitleaks_token }}

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'

    - name: Install dependencies
      run: npm ci
      working-directory: ${{ inputs.source_dir }}
      shell: bash

    - name: Create test:ci
      run: npm pkg set scripts.test:ci="ng test --no-watch --no-progress --browsers=ChromeHeadless"
      working-directory: ${{ inputs.source_dir }}
      shell: bash

    - name: Test Node application (headless)
      run: npm run test:ci
      working-directory: ${{ inputs.source_dir }}
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install Semgrep
      run: pip install semgrep
      shell: bash
    - name: Run Semgrep scan and output to Github Security
      working-directory: ${{ inputs.source_dir }}
      run: semgrep scan --sarif -o ${{ github.workspace }}/semgrep-output.sarif --oss-only
      shell: bash
    - name: Upload SARIF report to GitHub (even if previous step failed)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-output.sarif
        category: semgrep

    - name: Run Semgrep scan and fail on issues
      working-directory: ${{ inputs.source_dir }}
      run: semgrep scan --severity ERROR --severity WARNING --oss-only --json-output=semgrep
      shell: bash
    - name: Add semgrep output to action summary
      working-directory: ${{ inputs.source_dir }}
      run: |
        node .github/actions/node/semgrep.js >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Add QEMU support
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Format test image tag for caching
      run: |
        echo "formatted_branch_name=$(echo ${{ steps.branch-names.outputs.current_branch }} | sed 's/\//-/g')" >> $GITHUB_ENV
      shell: bash

    - name: Build Docker image for testing
      uses: docker/build-push-action@v6
      with:
        load: true
        tags: ${{ inputs.docker_image_name }}:${{ env.formatted_branch_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner sarif
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.docker_image_name }}:${{ env.formatted_branch_name }}
        format: sarif
        output: trivy.sarif
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    - name: Upload SARIF report to GitHub
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy.sarif
        category: Trivy

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.docker_image_name }}:${{ env.formatted_branch_name }}
        format: template
        template: "@.github/actions/node/trivy.tpl"
        output: trivy-high-critical.html
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Add Trivy output to action summary
      run: | 
        echo "<h1>Trivy Results :test_tube:</h1>" >> $GITHUB_STEP_SUMMARY; \
        cat trivy-high-critical.html >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Check if repository is public or private
      run: |
        curl -H "Authorization: token ${{ inputs.github_token }}" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/repos/${{ github.repository }}" > repo_details.json
        echo "private_repo=$(jq -r '.private' repo_details.json)" >> $GITHUB_ENV
      shell: bash

    - name: Login to dockerhub
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' && env.private_repo == 'false' }} 
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}

    - name: Login to GitHub Container Registry
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' && env.private_repo == 'true' }} 
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github_token }}

    - name: Semantic Release
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }} 
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      with:
        branch: main
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Set image tag and name
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }}
      run: |
        # set image tag
        if [[ $(echo ${{ steps.semantic.outputs.new_release_published }}) = "true" ]]; then
          echo "image_tag=$(echo ${{ steps.semantic.outputs.new_release_version }})" >> $GITHUB_ENV
        else
          echo "image_tag=$(echo $(git describe --tags --abbrev=0 | sed 's/^v//'))" >> $GITHUB_ENV
        fi

        # set image name
        if [[ ${{ env.private_repo }} = "true" ]]; then
          echo "image_name=$(echo ghcr.io/${{ github.repository_owner }}/${{ inputs.docker_image_name }})" >> $GITHUB_ENV
        else
          echo "image_name=$(echo ${{ inputs.dockerhub_username }}/${{ inputs.docker_image_name }})" >> $GITHUB_ENV
        fi       
      shell: bash

    - name: Extract metadata (tags, labels) for Docker
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }}
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.image_name }}
        tags: |
          ${{ env.image_tag }}
          latest

    - name: Build and push image
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }}
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}